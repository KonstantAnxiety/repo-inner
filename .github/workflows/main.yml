name: main

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

on:
  pull_request:

jobs:
  mainrepo_version_check:
    runs-on: ubuntu-latest
    outputs:
      mainrepo_prs: ${{ steps.gather_mainrepo_prs.outputs.report }}
    steps:
      - name: "Cleanup build folder"
        run: |
          rm -rf ./* || true
          rm -rf ./.??* || true

      - name: Checkout code
        uses: actions/checkout@v4
        with:
          submodules: true
          fetch-depth: 0

      - name: "Setting up git config"
        run: |
          git config --global --add safe.directory .
          git config --global --add safe.directory /__w/${{ github.event.repository.name }}/${{ github.event.repository.name }}

      - name: "Running mainrepo version check"
        run: git submodule update --remote mainrepo

      - run: mkdir /tmp/report
      - name: "Gather mainrepo PRs"
        id: gather_mainrepo_prs
        if: github.event_name == 'pull_request'
        shell: bash
        env:
          GH_TOKEN: ${{ github.token }}
        run: |
          touch /tmp/report/mainrepo_prs.lst
          mainrepo_sha_diff=($(git diff ${{ github.event.pull_request.base.sha }} ${{ github.event.pull_request.head.sha }} mainrepo | (grep Subproject || echo "") | awk '{print $3}'))
          if [ ${#mainrepo_sha_diff[@]} -eq 0 ]; then
            echo "No updates for mainrepo found, exiting..."
            exit 0
          fi
          mainrepo_sha_base="${mainrepo_sha_diff[0]}"
          mainrepo_sha_head="${mainrepo_sha_diff[1]}"
          cd mainrepo
          for sha in $(git log --reverse --format="%h" $mainrepo_sha_base..$mainrepo_sha_head); do
            pull_requests=("$(gh pr list --search $sha --state merged --json number,title,headRefName,updatedAt --template '{{range .}}{{printf "`%s`" .updatedAt}} {{printf "[#%v](https://github.com/KonstantAnxiety/repo-outer/pull/%v)" .number .number}} {{.title}}{{end}}')")
            echo "$(IFS=$'\n' ; echo "${pull_requests[*]}")" >> /tmp/report/mainrepo_prs.lst
          done
          cat /tmp/report/mainrepo_prs.lst
      - uses: actions/upload-artifact@v3
        with:
          name: "mainrepo_updates_report"
          path: /tmp/report/mainrepo_prs.lst
          retention-days: 1

  report_mainrepo_changes:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    needs: mainrepo_version_check
    permissions:
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - uses: actions/download-artifact@v3
        with:
          name: "mainrepo_updates_report"
          path: ./tmp/report/
      - name: "Post mainrepo PRs as a comment"
        shell: bash
        env:
          URL: ${{ github.event.pull_request.comments_url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          cat ./tmp/report/mainrepo_prs.lst
          mainrepo_prs=$(cat ./tmp/report/mainrepo_prs.lst)
          if [ -z "$mainrepo_prs" ]; then
            echo "The report is empty, exiting..."
            exit 0
          fi
          message=$(cat << EOF
          Detected mainrepo changes:
          $mainrepo_prs
          EOF
          )
          
          comment_id=$(gh api graphql -f query='
            query {
              repository(owner: "${{ github.repository_owner }}", name: "${{ github.repository }}") {
                pullRequest(number: ${{ github.event.pull_request.number }}) {
                  comments(last: 100) {
                    nodes {
                      id
                      author { login }
                      body
                    }
                  }
                }
              }
            }
          ' --jq 'last(.data.repository.pullRequest.comments.nodes[] | select((.body | startswith("Detected mainrepo changes")) and .author.login == "github-actions")).id')
          
          if [ -z "$comment_id" ]; then
            gh pr comment ${{ github.event.pull_request.number }} -b "$message"
          else
            gh api graphql -f query="
                mutation {
                    updateIssueComment(input: {
                        id: \"$comment_id\",
                        body: \"Detected mainrepo changes: 2\"
                    }) {
                        issueComment {
                            lastEditedAt
                        }
                    }
                }
            "
          fi

          

#          req_body=$(jq -n \
#            --arg msg "$mainrepo_prs" \
#            '{body: Detected mainrepo changes:\n$msg}')
#          curl \
#            -X POST \
#            $URL \
#            -H "Content-Type: application/json" \
#            -H "Authorization: token $GITHUB_TOKEN" \
#            --data "$req_body"
